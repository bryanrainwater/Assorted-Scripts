//=============================================================================
// (c) Copyright 2014 Diamond Systems Corporation. Use of this source code
// is subject to the terms of Diamond Systems' Software License Agreement.
// Diamond Systems provides no warranty of proper performance if this
// source code is modified.
//
// File: ARIESDAConvert.c  v1.0
//  Depedency :	Universal Driver version 7.00
//				DSCUD.H - Include file.
//				
//				LIBDSCUD-7.00.a	- Library file for Linux 2.6.29-3.x
//						
//				DSCUD.LIB	- Static library file for Windows 
//						( USE VC++ 6.0 or Visual Studio 2005 )
// Description: This sample code demonstrates the usage of UD function
//				ARIESDAConvert(). This sample code describes the usage
//				for Aries board. Channel and 16-bit output code are prompted
//              from the user, then output to the board. Other settings are
//              controlled via the jumpers for this board.
//============================================================================

// #include "DSCUD_demo_def.h"

#include <stdio.h>
#include <stdarg.h>
#include <string.h>

#include <time.h>

// Linux and QNX
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <termios.h>
#include <fcntl.h>
#include <unistd.h>

// diamond driver includes
#include "dscud.h"
#include "dscud_os.h"

#include "mpedaq0804.h"

#include "Aries.h"
//#define ARIES_DEFAULT_BASE_ADDRESS 0x280
//#define ARIES_DEFAULT_IRQ 5

#define CLK_SRC 1 //Use either 1 = cntr0 or 2 = cntr1


#include "dsm.h"


// globals
ERRPARAMS errorParams;          // structure for returning error code and error string

DSCB dscb = 0;                  // handle used to refer to the board
DSCCB dsccb;                    // structure containing ISA board settings
DSCCBP dsccbp;                   // structure containing board settings for PCI express and FeaturePak boards

BoardInfo *bi=NULL;

ARIESINIT init;
ARIESADSETTINGS ARIESADSettings;  // structure containing A/D conversion settings
ARIESWAVEFORM waveform;
ARIESADINT dscIntSettings;      // structure containing A/D conversion interrupt settings
ARIESADINTSTATUS intstatus;     // structure containing A/D conversion interrupt status
ARIESUSERINT inter;
ARIESCOUNTER counter;
ARIESFIFO Ariesfifo;

//DAQ0804 specific settings
DAQ0804ADSETTINGS MPEadsettings;
DAQ0804ADINT	 MPEdscIntSettings;//  structure containing A/D conversion interrupt settings
DAQ0804ADINTSTATUS MPEintstatus;// structure containing A/D conversion interrupt status
DAQ0804COUNTER MPECtr;

DAQ0804USERINT MPEinter;//MPEcounter;

DSCB MPEdscb;
DSCCB MPEdsccb;
DSCCBP MPEdsccbp;

BoardInfo *MPEbi;
unsigned int MPESample[8];
int MPEDARange;
int MPEdasim;
unsigned long int DACode;


int portConfig[4];              //used to store the port directions
int portConfiguration[6];


char input_buffer[256];
char output_buffer[256];

int Each_Channel_Buffer_Size;
int No_OF_DA_Channel;

//int channel = 0;
int intBuff = 0, intBuff1 = 0; // tmp vars
//int temp = 0; //temp storage

BYTE return_value = 0;
float frequency;
int no_channel;

//int sample[8]; // sample reading
DFLOAT voltage;
//int scansize;
float rate = 0.0;

//Defined for user function for counting interrupt operations
int count = 0;
int MPEcounter = 0;


#define ARIES_DEFAULT_BASE_ADDRESS 0x280
//Setting the IRQ to 7 seems to resolve spectral shift (non-walking)
//Also seems to resolve issues with fails every other restart
//Disables interrupts
#define ARIES_DEFAULT_IRQ 0x5

#define MAX_AD_CHANNEL_NUMBER 16
#define MAX_DA_CHANNEL_NUMBER 4


#define DACODE_MID 32768
#define DACODE_MAX 65535


#define MFCSCALE        0.5f // (MFC setpoint volts / MFC SLM)
#define PI              3.14159265f // Everybody loves pi!


#define SCANPTS         2048
//#define DA_OUTRATE      250000
#define DARANGE         65536
#define DAVOLTS         5.0f
//#define DARKINTERVAL    0
#define DARKINTERVAL    40


//#define NUM_WAVE_CHAN   2

//=============================================================================
int range;
int result;

SWORD *sample=NULL;

double VrefsAD[4] ={10.0,5.0,2.5,1.25};         // Voltage scale
double VrefsBip[4]={20.0,10.0,5.0,2.5};         // Gain

double MPEVrefs[2] = {5,10};
double MPEVrefsBip[2] = {10,20};


int VrefsDA[4]={5,10,5,10};
int LoadCal = 1;

int iindex,scansize,jIndex=0;   // miscellaneous

int DCscanRamp[SCANPTS];

//struct CONFIG config; //Parameters from config text file


// Little test program
/*
int main()
{
  int i; 

  interface_init();
  analog_write_voltage(0, 2.5);
  analogScan();
  i = writeBitDIOPort(2,0,1);
  //i = readBitDIOPort(2,0);
  interface_close();
}
*/

void userfun(void*)// param)// void *param )
  {
   //printf("hi\n");
   //printf("This is the counter: %u\n", count);
   count ++;
   //printf("Interrupt!\n");
   //update();
   //update();
   //emit update();// bufferUpdated();
   //update();
  }

void MPEuserfun(void*)
  {
   //printf("This is the MPE Counter: %u\n", MPEcounter++);
   MPEcounter ++;
  }


//=========================================================================
// Initialize the interface board
//    I. DRIVER INITIALIZATION (U
//  II. BOARD INITIALIZATION
//
int initialize(int bufferSize, float waveFrequency, int laserTuning, int laserNum, int numDAWaveChannels, int numADWaveChannels)
  {
   memset(&dsccb,0,sizeof(DSCCB));
   memset(&ARIESADSettings, 0, sizeof(ARIESADSETTINGS));
   memset(&dscIntSettings, 0, sizeof(ARIESADINT));
   memset(&intstatus, 0, sizeof(ARIESADINTSTATUS));
   memset(&counter, 0, sizeof(ARIESCOUNTER));
   memset(&inter, 0, sizeof(ARIESUSERINT));
   //memset(&dsccb,0,sizeof(DSCCB));
   memset(&Ariesfifo, 0, sizeof(ARIESFIFO));


   memset(&MPEdsccb, 0, sizeof(DSCCB));
   memset(&MPEdsccbp, 0, sizeof(DSCCBP));
   memset(&MPEadsettings, 0, sizeof(DAQ0804ADSETTINGS));
   memset(&MPEdscIntSettings, 0, sizeof(DAQ0804ADINT));
   memset(&MPEintstatus, 0, sizeof(DAQ0804ADINTSTATUS));
   memset(&MPECtr,0,sizeof(DAQ0804COUNTER));
   memset(&MPEinter, 0, sizeof(DAQ0804USERINT));

   //
   // Initializes the DSCUD library.
   //     1. initialize the driver, using the driver version for validation
   //

   //if ( (dscInit ( DSC_VERSION ) != DE_NONE) )
   //printf("DSC Version: %d\n", DSC_VERSION);
   if ( (dscInit ( DSC_VERSION ) != DE_NONE) )
     {
      dscGetLastError ( &errorParams );
      printf ( "dscInit error: %s %s\n", dscGetErrorString ( errorParams.ErrCode ), errorParams.errstring );
      return -1;
     }


   //dscSleep(1);
   //sleep(1);

   //*/
   // COMMENT ABOVE TO DISABLE INTERRUPT BASED MPE OPERATIONS


   //
   // Initialize the port_under_testboard. This function passes the various
   //      hardware parameters to the driver and resets the hardware.
   //
   //     STEPS TO FOLLOW:
   //      1. set the board type to DSC_ARIES for the ARIES board
   //      2. intialize and register the board with the driver, after which
   //        the struct, dscb, now holds the handle for the board

   dsccb.boardtype = DSC_ARIES;
   // Set the base address (Default 0x%x hit ENTER) : ",ARIES_DEFAULT_BASE_ADDRESS);
   dsccb.base_address = ARIES_DEFAULT_BASE_ADDRESS;


   // Set the IRQ (Default 0x%d hit ENTER) : ",ARIES_DEFAULT_IRQ );
   dsccb.int_level = ARIES_DEFAULT_IRQ; //5, 7, 9, 15

   //dscb.boardtype = DSC_ARIES;



   if ( (ARIESInitBoard (&dsccb, &init )!= DE_NONE) )
     {
      dscGetLastError ( &errorParams );
      printf (  "ARIESInitBoard error: %s %s\n", dscGetErrorString ( errorParams.ErrCode ), errorParams.errstring );
      return -1;
     }

   bi=DSCGetBoardInfo(dsccb.boardnum);


   //Initialize Mincard (MPE) and/or any other AD system before waveform generation
   MPEdsccbp.boardtype = DSC_MPEDAQ0804;

   if ( DAQ0804InitBoard ( &MPEdsccbp ) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf("DAQ0804InitBoard error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   MPEbi = DSCGetBoardInfo(MPEdsccbp.boardnum);


   //*****************************************************************************
   // DA (output) specific initialization

   /*
   // Set output range (0 = 0-5V, 1 = 0-10V, 2 = +/-5, 3 = +/-10)<default:0>:");
   range = 0;

   // Load calibration values(1-Enable,0-Disable)
   LoadCal = 1;

   // Set settings same on all (4) channels
   for ( int i = 0; i < MAX_DA_CHANNEL_NUMBER; i++ )
    {
     result = ARIESDASetSettings ( bi,i, range, 0, 0 ,LoadCal);//channel,range,overrange,enable
     if ( result != DE_NONE )
      {
       dscGetLastError(&errorParams);
       printf (  "ARIESDASetSettings error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
       return -1;
      }
   }
   */

   //*****************************************************************************
   // AD (input) specific initialization
   //memset(&ARIESADSettings,0,sizeof(ARIESADSETTINGS));

   ARIESADSettings.Lowch = 0;
   ARIESADSettings.Highch =  numADWaveChannels - 1;
   //ARIESADSettings.Highch=MAX_AD_CHANNEL_NUMBER-1;

   scansize = ARIESADSettings.Highch - ARIESADSettings.Lowch + 1;

   ARIESADSettings.Polarity = 0;  // Set A/D polarity (0 for bipolar, 1 for unipolar, default: 0): " );
   ARIESADSettings.Gain = 0;   // Set A/D Gain value (0-3, 0 = 1, 1 = 2, 2 = 4, 3 = 8,default 0):");
   ARIESADSettings.Sedi = 1;   // Set input mode (0 = single-ended, 1 = differential; default 0):");
   ARIESADSettings.ScanEnable = 0;   // Set Scan Enable to false initially
   ARIESADSettings.LoadCal=0;//1;

   // Continue with the scan
   if( ARIESADSettings.Lowch != ARIESADSettings.Highch )
     {
      ARIESADSettings.ScanEnable = 1;      // Set scan enable to true
      ARIESADSettings.ScanInterval = 1;      // Set scan Interval (0 = 10us, 1 = 5us, 2 = 8us, 3 = programmable, default 0):");
      //The line above is the difference between running once or running perpetually???? Does not really make sense
      //Two processes should be isolated completely on different clocks regardless of timing.
   }

   /*
   //if ( ARIESADSetClock( bi, &ARIESADSettings.ADClk) != DE_NONE )
   if ( ARIESADSetClock ( bi,(BYTE)2)  != DE_NONE )
      {
         dscGetLastError(&errorParams);
         printf ( "ARIESADSetClock error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
         return -1;
      }
   */

  //*****************************************************************************
   // DA Waveform specific initialization
   range = 0; // 0 = 0-5, 1 = 0-10, 2 = +/-5, 3 = +/-10
   //frequency = 80;

   no_channel = numDAWaveChannels;//NUM_WAVE_CHAN; //Between 1 and 4
   No_OF_DA_Channel = no_channel;
   Each_Channel_Buffer_Size = (int)(bufferSize/no_channel);

   waveform.FrameSize = no_channel;
   waveform.Frames = Each_Channel_Buffer_Size;
   waveform.Clock = CLK_SRC; // 0 = software increment, 1 = cntr0, 2 = cntr1
   waveform.Cycle = 1;
   //frequency
   rate = (float)Each_Channel_Buffer_Size * (float)waveFrequency;

   //printf("Rate: %f\n", rate);
   //printf("rate: %f", rate);
   if(rate > 250000)
       printf("invalid frequency.\n");

   //rate = 164473.0;
   //rate = 100000.0;//204800.0;
   //rate = 164473.0;//4.0;
   //rate = 10000.0;//
   //rate =float(int(rate/2));
   //The highest rate that the board can support is 164473
   //Leaving 85526 as the remainder

   //waveform.Rate = waveFrequency;//rate;//frequency;
   waveform.Rate = rate;//frequency;


   //pause conversions if necessary
   if( ARIESWaveformPause(bi) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformStart error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   //in handler
   if( ARIESWaveformReset(bi) != DE_NONE )
   {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformReset error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
   }


   if( ARIESWaveformConfig(bi, &waveform) != DE_NONE )
       {
          dscGetLastError(&errorParams);
          printf ( "ARIESWaveformConfig error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
          return -1;
       }

   //Allocate the memory to hold waveform values
   //waveform.Waveform = (unsigned int*) malloc( (waveform.Frames * waveform.FrameSize) * sizeof(unsigned int*));
   waveform.Waveform = new unsigned int[waveform.Frames * waveform.FrameSize];


   if( waveform.Waveform == NULL)
      {
       printf("could not allocate memory to hold waveform.\n");
       return -1;
      }

   //waveform.Channels = (int *)malloc(No_OF_DA_Channel * sizeof(int *));
   waveform.Channels = new int[No_OF_DA_Channel];
   if(waveform.Channels == NULL)
      {
       printf("could not allocate memory to hold channel values\n");
       return -1;
      }

   if( no_channel > 1)
      laserNum = 0;

   for (int channel_index = 0; channel_index < no_channel; channel_index++)
      {
       //channel = channel_index;
       waveform.Channels[channel_index] = channel_index + laserNum;
       //can be misordered or skipped around
      }

   int waveform_value = 0;

   float startVoltage = 1.5;//2.0;
   float endVoltage = 5.0;
   float voltageSpan = endVoltage - startVoltage;
   int bitSpan = 0;//Each_Channel_Buffer_Size - DARKINTERVAL - 1;
   float voltageStep = 0.0;//voltageSpan / bitSpan;
   float DAScale = (float) (0xFFFF)/(5.0);

   //bool simultaneous = false;
   //if ( numDAWaveChannels == numADWaveChannels )
   //   simultaneous = true;

   intBuff = 0xFFFF/waveform.Frames;
   intBuff1 = ((0xFFFF)/(waveform.Frames/2));
   for(int i_index = 0, j_index = 0; i_index < Each_Channel_Buffer_Size; i_index++)
      {
       for ( int k_index = 0; k_index < No_OF_DA_Channel; k_index++)
          {
           if ( No_OF_DA_Channel == 1 )
             {
              bitSpan = Each_Channel_Buffer_Size - DARKINTERVAL - 1;
              voltageStep = voltageSpan / bitSpan;
              if ( i_index >= DARKINTERVAL)
                {
                 //Test I control from PI to see if it changes response within current modulation (had no discernable
                 // effect in slow temperature control.
                 // Also attempt quicker temperature tuning with smaller step?
                 if ( 1==1 )//i_index % 2 == 0 )
                    waveform_value = (int) (( startVoltage + voltageStep * (i_index - DARKINTERVAL )) * DAScale );// * 0xFFFF );
                 else
                    waveform_value = (int) 20000;
                  //waveform_value = (int) (((float)(i_index)/(float)waveform.Frames*1.0) * (0xFFFF));
                }
              else
                 waveform_value = 0;
              //printf("This is the waveform_value: %u\n", waveform_value);

              bitSpan = (int)(Each_Channel_Buffer_Size/2);
              voltageStep = (voltageSpan / ((float)(bitSpan - 1)));


              //Uncomment for laser PI Tuning
              /*
              if ( i_index < bitSpan )
                 waveform_value = (int) (( startVoltage + voltageStep * (i_index)) * DAScale );
              else
                 waveform_value = (int)((startVoltage + (endVoltage - startVoltage)/2.0f) * DAScale);//(int) (( endVoltage - voltageStep * (i_index - bitSpan)) * DAScale );
              */
              //
              //printf("Waveform value: %u\n", waveform_value);
             }
           else
             {
              if ( !laserTuning )
                {
                 bitSpan = (int)(Each_Channel_Buffer_Size/No_OF_DA_Channel);
                 //printf("bit span: %u\n", bitSpan);
                 voltageStep = (voltageSpan / ((float)(bitSpan - 1)));
                 if ( k_index == 0 && i_index < (int)bitSpan )
                    waveform_value = 0;
                 else if ( k_index == 0 && i_index >= (int)bitSpan )
                    waveform_value = (int) (( startVoltage + voltageStep * (float)(i_index - bitSpan)) * DAScale );
                 else if ( k_index == 1 && i_index >= (int)bitSpan )
                    waveform_value = 0;
                 else if ( k_index == 1 && i_index < (int) bitSpan )
                    waveform_value = (int) (( startVoltage + voltageStep * (float)(i_index)) * DAScale );
                }
              else
                {
                 bitSpan = Each_Channel_Buffer_Size;
                 voltageStep = (voltageSpan / ((float)(bitSpan - 1 )));
                 if ( k_index == 0 )
                     waveform_value = (int) (DAScale * ((endVoltage + startVoltage)/2.0));//(( startVoltage + voltageStep * (float)(i_index)) * DAScale );
                     //waveform_value = (int) (( startVoltage + voltageStep * (float)(i_index)) * DAScale );
                 else// ( k_index == 1 )
                   {
                    if ( i_index < (int)(bitSpan/2) )
                       waveform_value = (int)(DAScale * 2.0);//endVoltage);//4.9
                    else
                       waveform_value = (int)(DAScale * 2.05);//startVoltage);// startVoltage);//0
                    //waveform_value = (int) (( startVoltage + voltageStep * (float)(i_index)) * DAScale );
                   }
                }
             }
           waveform.Waveform[j_index + k_index] = waveform_value;

         }
       j_index = j_index + No_OF_DA_Channel;
      }

   //for ( int i = 0; i < bufferSize; i++ )
   //   printf("Buffer Value at i = %u: %u\n", i, waveform.Waveform[i]);

   //printf("waveform.Channels[0] = %u",waveform.Channels[0]);
   for ( int i_index = 0; i_index < No_OF_DA_Channel; i_index++ )
      {
       //if( ARIESDASetSettings ( bi, i_index, range, 0, 0, 1) != DE_NONE ) // channel, range, overrange, enable
       if( ARIESDASetSettings ( bi, waveform.Channels[i_index], range, 0, 0, 1) != DE_NONE ) // channel, range, overrange, enable
         {
          dscGetLastError(&errorParams);
          printf ( "ARIESSetSettings error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
          return -1;
         }
      }

   //in error handler
   //loads d/a conversion values into buffer
   if( ARIESWaveformBufferLoad(bi,&waveform)  != DE_NONE )
   {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformBufferLoad error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
   }

   //dscSleep(5);

   //*****************************************************************************
   // AD Interrupt specific initialization
   dscIntSettings.ADClk = CLK_SRC+1; //1=ExternalTrig, 2= cntr0, 3 = cntr1
   //if (dscIntSettings.ADClk != 1)
   //    rate = frequency;


   // Load the settings into the AD system
   if ( ARIESADSetSettings ( bi,&ARIESADSettings)  != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESADSetSettings error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   //handler
   if( ARIESADSetClock (bi, dscIntSettings.ADClk) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESADSetClock error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }


   //dscIntSettings.ADClk = 0;

   dscIntSettings.NumConversions = bufferSize;//2048;//1600; //num of A/D conversions (must be multiple of FIFO threshold value default (1600))
   dscIntSettings.Cycle = 1; //0 = one shot, 1 = continuous
   dscIntSettings.FIFOEnable = 1; //0 = disable, 1 = enable
   //if(dscIntSettings.FIFOEnable)
   //There appears to be a slight improvement when the fifo threshold matches the number of conversions
   dscIntSettings.FIFOThreshold = bufferSize;//bufferSize/4;//2048;//1600; //0-2048
   //dscIntSettings.ADBuffer = (SWORD*) malloc(sizeof(SWORD)* dscIntSettings.NumConversions);
   dscIntSettings.ADBuffer = new SWORD[dscIntSettings.NumConversions];//*2];

   if(dscIntSettings.ADBuffer == NULL)
      {
       printf("could not allocate memory for buffer\n.");
       return 0;
      }

   memset(dscIntSettings.ADBuffer, 0, (sizeof(SWORD)* dscIntSettings.NumConversions) );

   inter.IntFunc = userfun;
   inter.Mode = 2; //0 = alone, 1 = before standard function, 2 = after standard function
   inter.Enable = 1; //0 = disable interrupts, 1 = enable interrupts
   inter.Source = 0;//0; //0 = A/D, 1 = unused, 2 = counter 2, output, 4 = digital I/O



   //The SLEEP statements around this function are VERYYYY IMPORTANT for some reason
   //handler
   //dscSleep(1000);
   //sleep(1);
   if( ARIESUserInterruptConfig(bi, &inter) != DE_NONE)
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESUserInterruptConfig error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }
   //dscSleep(1000);
   //sleep(1);

   /*
   if ( ARIESADStartClock ( bi)  != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESADStartClock error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }
   */

   //ARIESFIFOStatus(bi, &Ariesfifo);

   //ARIESADIntCancel(bi);


   //handler
   if ( ARIESADInt(bi, &dscIntSettings) != DE_NONE )
   {
    dscGetLastError(&errorParams);
    printf ( "ARIESADInt error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
    return -1;
   }

   //start conversions
   if( ARIESWaveformStart(bi)  != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformStart error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   //ARIESCounterSetRate()

   /*
   if(dscIntSettings.ADClk != 1)
      {
       counter.CtrNo = 0;//5;//dscIntSettings.ADClk - 2;
       counter.Rate = rate;
       counter.CtrClock = 2;//3;//0; //Changed from 1 (May not work)
       counter.CtrOutEn = 0;
       counter.CtrOutPol = 0;
       counter.ctrOutWidth = 0;
       //handler
       //ARIESCounterConfig(bi, &counter);
       if ( ARIESCounterSetRate(bi, &counter) != DE_NONE )
          return -1;
      }
      */

   /*
   counter.Rate = rate;
   counter.CtrClock = 3;
   counter.CtrOutEn = 1;
   counter.CtrOutPol = 0;
   counter.ctrOutWidth = 0;
   counter.CtrReload = 1;
   //counter.ctrOutWidth = 0;

   for(int i = 0; i < 8; i++)
     {
      counter.CtrNo = i;
      ARIESCounterSetRate (bi, &counter);
     }
     */



   /*
   if (ARIESCounterSetRate (bi,dscadsettings.ADClock-2,rate,0,0) !=DE_NONE)
   {
   dscGetLastError (&errorParams);
   printf ( "ARIESCounterSetRateerror: %s %s\n",
   dscGetErrorString(errorParams.ErrCode),
   errorParams.errstring);
   return 0;
   }
   */


   //if ( ARIESADIntResume(bi) != DE_NONE )
   //    return -1;
   //ARIESADStartClock(bi);


   //ARIESADIntPause(bi);

   //sleep(2);
   ///*

   //*/
   //sleep(1)
   //dscSleep(1000);


   MPEadsettings.Lowch = 0;
   MPEadsettings.Highch = 3;
   MPEadsettings.Polarity = 0; // 0 = Bipolar, 1 = unipolar
   MPEadsettings.Range = 0; // 0 = 5V, 1 = 10V
   MPEadsettings.Sedi = 1; // 0 = SE, 1 = DIFF
   MPEadsettings.ScanInterval = 0; // 0 = 10us, 1 = 12.5us, 2 = 20us, 3 = programmable
   //MPEadsettings.ProgInt = 0 //Only if programmable interval (range 100-255) (this value times 100ns)
   //MPEadsettings.ADClock = 0;
   MPEadsettings.ADClock = 3;//2= counter 0, 3 = counter 1
   MPEadsettings.ScanEnable = 0;


   //////////////////////////////////////////////////////////////////////////
   //int MPEscansize = MPEadsettings.Highch - MPEadsettings.Lowch +1;
   MPEadsettings.ScanEnable = 0;

   if(MPEadsettings.Lowch != MPEadsettings.Highch)
   {
      MPEadsettings.ScanEnable = 1;
   }

   float MPErate = 0.0;//(int)waveFrequency * 2.0;
   if(MPEadsettings.ADClock !=1)
   {
      MPErate = 100000.0;//0.0;//00.0;//(float) ((int)waveFrequency * 2);//1000.0;
   }
   ////////////////////////////////////////////////////////////////////////////

   //If running differential, cut the range in half...

   if ( (DAQ0804ADSetSettings ( MPEbi, &MPEadsettings ) ) != DE_NONE )
   {
    dscGetLastError(&errorParams);
    printf("DAQ0804ADSetSettings error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
    return -1;
   }

   if ( ( DAQ0804ADSetTiming ( MPEbi, &MPEadsettings ) ) != DE_NONE )
   {
    dscGetLastError(&errorParams);
    printf("DAQ0804ADSetTiming error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
    return -1;
   }


   MPEDARange = 1; //0 = 0-2.5v, 1 = 0-5V
   MPEdasim = 0;
   //MPE DAQ0804 D/A Settings
   if ( DAQ0804DASetSettings( MPEbi, MPEDARange, MPEdasim ) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf("DAQ0804DASetSettings error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   //COMMENT BELOW TO DISABLE INTERRUPT BASED MPE OPERATION


   MPEinter.IntFunc = MPEuserfun;
   MPEinter.Mode = 2; //0 = alone, 1 = before standard function, 2 = after standard function
   MPEinter.Enable = 1; //0 = disable interrupts, 1 = enable interrupts
   MPEinter.Source = 0; //0 = A/D, 1 = unused, 2 = counter 2, output, 4 = digital I/O

   DAQ0804UserInterruptConfig(MPEbi, &MPEinter);

   MPEdscIntSettings.NumConversions = 8;
   MPEdscIntSettings.Cycle = 1;
   MPEdscIntSettings.FIFOEnable = 1;
   //MPEdscIntSettings.ADClk = 3;
   //MPEdscIntSettings.FIFOThreshold = 8;

   if(MPEdscIntSettings.FIFOEnable)
       MPEdscIntSettings.FIFOThreshold = 8;//MPEdscIntSettings.NumConversions;//1000;

   //MPEdscIntSettings.ADBuffer = (SWORD*) malloc (sizeof(SWORD)* MPEdscIntSettings.NumConversions );
   MPEdscIntSettings.ADBuffer = new SWORD[MPEdscIntSettings.NumConversions];

   if(MPEdscIntSettings.ADBuffer == NULL)
   {
      printf("Could not allocate memory for ADBuffer \n");
      return -1;
   }
   if( DAQ0804ADInt(MPEbi,&MPEdscIntSettings ) !=DE_NONE)
   {
       dscGetLastError(&errorParams);
       printf ( "DAQ0804ADInt error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
       return -1;
   }
   if(MPEadsettings.ADClock !=1)
   {
       MPECtr.Rate = MPErate ;
       MPECtr.CtrNo = MPEadsettings.ADClock-2 ;
       MPECtr.CtrClk = 3;
       MPECtr.CtrOutEn 	= 0 ;
       MPECtr.CtrOutPol = 0 ;
       MPECtr.ctrOutWidth = 0 ;

       if( DAQ0804CounterSetRate(MPEbi,&MPECtr) !=DE_NONE)
       {
           dscGetLastError(&errorParams);
           printf ( "DAQ0804ADInt error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
           return -1;
       }
   }
   if ( (DAQ0804ADSetTiming(MPEbi,&MPEadsettings) ) != DE_NONE )
   {
           dscGetLastError(&errorParams);
           printf ( "DAQ0804ADSetTiming error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
           return -1;
   }
    //dscSleep(1000);

   //ARIESADIntResume(bi);


   return 0;
  }


int statusMPE( void )
  {
   /*
   if( DAQ0804ADIntStatus(MPEbi, &MPEintstatus) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf("DAQ0804ADIntStatus error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring);
     }
   return (int)MPEintstatus.NumConversions;
   */
   return (int)MPEcounter;
  }

void writeMPEvoltage( float voltage , int channel)
  {
   if ( voltage > MPEVrefs[MPEDARange] || voltage < 0 )
      return;
   DACode = (unsigned long int) (voltage/MPEVrefs[MPEDARange] * 2.0 * 65535.0);
   //Expected = (double)(DACode/65535.0) * MPEVrefs[MPEDARange];
   if ( ( DAQ0804DAConvert ( MPEbi, channel, DACode ) ) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf("DAQ0804DASetSettings error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return;
     }
  }

void MPEreadBuffer( int *voltage )
  {
   //printf("Got to this point\n");
   for(int i_index = 0; i_index < 8; i_index++ )//MPEdscIntSettings.NumConversions; i_index++)
      voltage[i_index] = MPEdscIntSettings.ADBuffer[i_index];
   //printf("Got to this second point\n");
   //unsigned int MPEsample[8];
   //Used to retrieve data from channels


   //Segment for sequential reads of MPE
   /*
   if ( ( DAQ0804ADTrigger( MPEbi, MPESample ) ) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf("DAQ0804ADTrigger error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      //return -1;
     }
   //Output to buffer
   //for (int i = 0; i < MPEadsettings.Highch - MPEadsettings.Lowch; i++ )
   for ( int i = 0; i < 8; i++ )
      voltage[i] = (int) MPESample[i];
   */
  }

void MPEanalogConvert( float *voltage )
  {
   for(int i_index = 0; i_index <= MPEadsettings.Highch - MPEadsettings.Lowch; i_index++)
     {
      if(MPEadsettings.Polarity == 0)
         voltage[i_index] = (float)(voltage[i_index]/65536.0) * MPEVrefsBip[MPEadsettings.Range];
      else
         voltage[i_index] = (float)((voltage[i_index] + 32768)/65536.0) *MPEVrefs[MPEadsettings.Range];
     }
  }



int analogIntStatus( )//int lastCount )
  {
   //dscSleep(1);
   //ARIESADIntStatus(bi, &intstatus);
   //printf("Number of conversions: %u\t Number of Counts: %u\n", intstatus.NumConversions,count);
   //(int)intstatus.NumConversions);
   //return (int)count;//intstatus.NumConversions;
   //printf("Number of Counts: %u\n",count);
   //printf("Within AnalogIntStatus with count value: %u\n", count);
   //return (int)(count);
   //ARIESCounterRead(bi,&counter);
   //printf("Counter data: %ld\n", counter.CtrData);

   //ARIESFIFOStatus( bi, &Ariesfifo);
   //printf ("Depth = %d \n", Ariesfifo.Depth);
   //printf ("Overflow flag = %d \n", Ariesfifo.OF);
   //printf ("Unread Flag: %d \n", Ariesfifo.EF);

   //ARIESADIntStatus(bi, &intstatus);
   //dscSleep(5);
   //ARIESFIFOStatus(bi,&Ariesfifo);
   //count++;

/*
    if ( ARIESFIFOStatus(bi, &Ariesfifo) != DE_NONE)//;
    {
    dscGetLastError (&errorParams);
    printf ( "ARIESFIFOStatuserror: %s %s\n",
      dscGetErrorString(errorParams.ErrCode),
      errorParams.errstring);
    return 0;
    }
*/
   if (1==0)//1)//0)//1)//lastCount == count)
     {
      /*
      //ARIESADIntStatus(bi, &intstatus);
      if (ARIESADIntStatus (bi, &intstatus) != DE_NONE)
      {
      dscGetLastError (&errorParams);
      printf ( "ARIESADIntStatuserror: %s %s\n",
        dscGetErrorString(errorParams.ErrCode),
        errorParams.errstring);
      return 0;
      }
      */
      //printf("OPstatus : %d\n",intstatus.OpStatus);
      //printf("Fifo Depth: %d\n",intstatus.FIFODepth);
      //printf("Num Conversions: %d\n", intstatus.NumConversions);

      if ( ARIESFIFOStatus(bi, &Ariesfifo) != DE_NONE)//;
      {
      dscGetLastError (&errorParams);
      printf ( "ARIESFIFOStatuserror: %s %s\n",
        dscGetErrorString(errorParams.ErrCode),
        errorParams.errstring);
      return 0;
      }

      //if ( intstatus.FIFODepth == 2048 ) {//Ariesfifo.Depth == 2048) {//dscIntSettings.NumConversions ) {
      if ( Ariesfifo.Depth == 2048 ) {//
          //lastCount++;
         count++;
         //return lastCount;
         //printf(intstatus);
         //printf("Depth = %d \n", Ariesfifo.Depth);

      }

   }

   //return lastCount;
   return count;
   //if (Ariesfifo.EF == 0)
   //   return lastCount + 1;
   //return lastCount+1;//(int)count;
  }


int readBuffer( int *voltage )
  {
   //int newCount = count;
   //if ((newCount) <= priorCount || priorCount == -1 )
   //   return -1;
   //dscSleep(1);
   //ARIESADIntStatus(bi, &intstatus);

    /*
    if ( ARIESFIFOStatus(bi, &Ariesfifo) != DE_NONE)//;
    {
    dscGetLastError (&errorParams);
    printf ( "ARIESFIFOStatuserror: %s %s\n",
      dscGetErrorString(errorParams.ErrCode),
      errorParams.errstring);
    return 0;
    }
    */

   short int sample;
   /*
   short int sample;
   //BYTE fail = ARIESADRead(bi, *voltage);
   if (ARIESADRead(bi,&sample) != ARIES_FIFO_EMPTY)
   {
        printf ("A/D sample = 0x%x \n", sample);
        return count;
   }
   else
       return 0;
   */
   for ( int i_index = 0; i_index < dscIntSettings.NumConversions; i_index++)
      {
       voltage[i_index] = dscIntSettings.ADBuffer[i_index];
       //if( ARIESADRead(bi, &sample) != ARIES_FIFO_EMPTY )
       //    voltage[i_index] = sample;
       //else
       //    return -1;
   }
   

   //for(int i_index = 0; i_index < dscIntSettings.NumConversions; i_index++)
   //   voltage[i_index] = dscIntSettings.ADBuffer[i_index];


   //for(int i_index = ARIESADSettings.Lowch, j_index = 0; j_index < dscIntSettings.NumConversions; i_index++, j_index++)
   //   voltage[j_index] = dscIntSettings.ADBuffer[j_index];
   //newCount = count;
   //return newCount;
   return count;
   //return (int)(0);//count);//(intstatus.NumConversions);
  }

int readBufferVoltage( float *voltage )
  {
   double outputVoltage = 0.00;

   //printf("\nChannel Num\tA/DValue(De)\tA/DValue(Hex)\tVolts\n\n");
   //dscSleep(1);
   //for(int i_index = ARIESADSettings.Lowch, j_index = 0; i_index <= ARIESADSettings.Highch && j_index < scansize; i_index++, j_index++)
   //analogConvert( float voltage );
   for(int i_index = ARIESADSettings.Lowch, j_index = 0; j_index < dscIntSettings.NumConversions; i_index++, j_index++)
     {
      if(ARIESADSettings.Polarity == 0)
         outputVoltage = (float)(dscIntSettings.ADBuffer[j_index]/65536.0) * VrefsBip[ARIESADSettings.Gain];
      else
         outputVoltage = (float)((dscIntSettings.ADBuffer[j_index] + 32768)/65536.0) *VrefsAD[ARIESADSettings.Gain];
      //printf("%2d\t\t%d\t\t0x%X\t\t%0.41f\n", i_index, dscIntSettings.ADBuffer[j_index], (unsigned short)dscIntSettings.ADBuffer[j_index], outputVoltage);
      voltage[j_index] = outputVoltage;
//      voltage[j_index] = dscIntSettings.ADBuffer[j_index];
     }
   //ARIESADIntStatus(bi, &intstatus);
   //printf("This is the counter: %u\n", count);
   //printf("Number of conversions: %u",intstatus.NumConversions)
   return (int)(count);//(intstatus.NumConversions);
  }

void analogConvert( float *voltage )
  {
   for(int i_index = ARIESADSettings.Lowch, j_index = 0; j_index < dscIntSettings.NumConversions; i_index++, j_index++)
     {
      if(ARIESADSettings.Polarity == 0)
         voltage[j_index] = (float)(voltage[j_index]/65536.0) * VrefsBip[ARIESADSettings.Gain];
      else
         voltage[j_index] = (float)((voltage[j_index] + 32768)/65536.0) *VrefsAD[ARIESADSettings.Gain];
     }
  }

//=========================================================================
// Scan all 16 channels to read analog channels
//
//     Perform the actual sampling and output the results. To calculate
//      the actual input voltages, we must convert the sample code (which
//      must be cast to a short to get the correct code) and then plug it
//      into one of the formulas located in the manual for your board (under
//      "A/D Conversion Formulas").
//=========================================================================
/*
int analogScan(double *voltage)
  {
   //dscSleep(1);
   double outputVoltage = 0.0;
   sample=(SWORD*)malloc(16*sizeof(SWORD));

   // Do the AD SCAN
   if ( (ARIESADScan ( bi, sample ) ) != DE_NONE )
      {
        dscGetLastError(&errorParams);
        printf ( "ARIESADScan error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
        return -1;
      }

   // Do the conversion to voltages
   for(iindex= ARIESADSettings.Lowch,jIndex=0; iindex <= ARIESADSettings.Highch && jIndex <scansize; iindex++,jIndex++)
      {
        if(ARIESADSettings.Polarity == 0)
          {
            outputVoltage = (double)(sample[jIndex]/65536.0)* VrefsBip[ARIESADSettings.Gain];
          }
          else
          {
            outputVoltage = (double)((sample[jIndex]+ 32768)/65536.0)* VrefsAD[ARIESADSettings.Gain];
          }

          // Assign to output array
         voltage[iindex] = outputVoltage;
      }

   return 0;
}
*/

/*********************************************************************/
// Cleanup any remnants left by the program and free the resources used
// by the driver.
/*********************************************************************/

int interface_close(void) {

   for( int i = 0; i < (int)(waveform.Frames * waveform.FrameSize); i++ )
      waveform.Waveform[i] = 0;//waveform_value;


   //start conversions
   if( ARIESWaveformPause(bi) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformStart error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   if( ARIESWaveformBufferLoad(bi,&waveform)  != DE_NONE )
   {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformBufferLoad error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
   }

   //dscSleep(1000);


   //start conversions
   if( ARIESWaveformPause(bi) != DE_NONE )
     {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformStart error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
     }

   //in handler
   if( ARIESWaveformReset(bi) != DE_NONE )
   {
      dscGetLastError(&errorParams);
      printf ( "ARIESWaveformReset error: %s %s\n", dscGetErrorString(errorParams.ErrCode), errorParams.errstring );
      return -1;
   }



   //dscSleep(1000);

   //free(waveform.Waveform);
   //free(waveform.Channels);

   delete[] waveform.Waveform;
   delete[] waveform.Channels;
   //ARIESADIntPause(bi);
   ARIESADIntCancel(bi);
   DAQ0804ADIntCancel(MPEbi);


   //free(dscIntSettings.ADBuffer);
   //free(MPEdscIntSettings.ADBuffer);

   delete[] dscIntSettings.ADBuffer;
   delete[] MPEdscIntSettings.ADBuffer;

   //ARIESCounterReset(bi,  dscIntSettings.ADClk - 2);

   //ARIESCounterReset(bi, 0);
   //ARIESCounterReset(bi, 1);
   //ARIESCounterReset(bi, 2);


   ARIESADStopClock(bi);

   for( int i = 0; i < 8; i++ )
       ARIESCounterReset(bi,i);

   ARIESFreeBoard(dsccb.boardnum);
   DAQ0804FreeBoard(MPEdsccbp.boardnum);
   //DAQ0804FreeBoard(MPEdscb);
   dscFree ( );



   printf("Successful Shutdown\n");


   return 0;
}

/*
void createScanRamp(void)
  {
   int iramp;
   float step, ADscale;
   float modamp = 0.2;

   // Determine size of voltage step between scan points
   step = (config.vEnd - config.vStart) / (SCANPTS - DARKINTERVAL);

   // Determine range conversion factor from voltage to DA count
   ADscale = (float)(DARANGE) / DAVOLTS;

   if ( 1 == 1 ) //Regular Scan, Null for PP2F
     {
      for ( iramp = 0; iramp < DARKINTERVAL; iramp++)
         DCscanRamp[iramp] = 0;
      for ( iramp = DARKINTERVAL; iramp < SCANPTS; iramp++)
         DCscanRamp[iramp] = (int)((config.vStart + step * (iramp - DARKINTERVAL )) * ADscale);

      return;
     }

   if(4.0*modamp > (config.vEnd - config.vStart))
       modamp = (config.vEnd - config.vStart)/4.0;

   step = (config.vEnd - config.vStart - 2.0*modamp) / (SCANPTS - DARKINTERVAL);
   for ( iramp = 0; iramp < DARKINTERVAL; iramp++)
       DCscanRamp[iramp] = 0;

   for ( iramp = DARKINTERVAL; iramp < SCANPTS; iramp++)
       DCscanRamp[iramp] = (int)((config.vStart + modamp + modamp*sin(iramp*PI*2.0*(1.0/32.0)) + step*(iramp)) * ADscale);

  }
*/


